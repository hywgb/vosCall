####### Global Parameters #########
log_level=3
fork=yes
children=16
auto_aliases=no

listen=udp:0.0.0.0:5060
listen=tcp:0.0.0.0:5060

mpath="/usr/lib/opensips/modules/"

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "sipmsgops.so"
loadmodule "uac.so"
loadmodule "dialog.so"
loadmodule "topology_hiding.so"
loadmodule "http_client.so"

modparam("tm", "fr_timer", 30000)
modparam("tm", "fr_inv_timer", 120000)
modparam("rr", "enable_double_rr", 1)
modparam("dialog", "db_mode", 0)

route[AUTH]{
    # TODO: call auth-svc via http_client or cached ACLs
    return;
}

route[ROUTING]{
    # Call external route-svc (via HTTP gateway) to get candidates
    $var/json = '{"call_id":"' + $ci + '","from_uri":"' + $fu + '","to_uri":"' + $ru + '","src_ip":"' + $si + '"}';
    http_client_query("http://admin-api:8080/internal/route/pick","content-type=application/json","$var/json","$var/resp");
    # Parse response and populate branches (implementation needed via script or JSON ops)
    # For now, assume RURI updated by gateway
    return;
}

route[RELAY]{
    remove_hf("Route");
    t_on_failure("FAILURE");
    t_on_reply("REPLY");
    if (!t_relay()) {
        send_reply("500","Internal Error");
    }
    exit;
}

route[INVITE]{
    if (!mf_process_maxfwd(10)) { send_reply("483","Too Many Hops"); exit; }
    route(AUTH);
    route(ROUTING);
    route(RELAY);
}

route[DEFAULT]{
    if (is_method("INVITE")) { route(INVITE); exit; }
    route(RELAY);
}

failure_route[FAILURE]{
    if (t_check_status("408|5[0-9][0-9]")) {
        # try next branch or fetch fallback from route-svc
        if (t_next_contacts()) {
            t_relay();
            exit;
        }
        # external fallback
        route(ROUTING);
        route(RELAY);
        exit;
    }
}

onreply_route[REPLY]{
    if (status=183 || status=180) { # early media handling hooks }
}